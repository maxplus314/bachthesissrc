#include"td/utils/Gzip.h"
#include"td/utils/base64.h"
#include"vm/boc.h"
#include<cstdint>
#include<iostream>
#include<numeric>
#include<queue>
#include<vector>
#define lg(x)32-__builtin_clz(x)
#define X push_back
#define H int64_t
#define R return
#define V vector
#define Y string
#define A auto
#define S size
#define F for
#define I int 
using namespace std;Y b64d(Y s){R td::base64_decode(s).move_as_ok();}uint8_t brev8(uint8_t x){uint8_t y=0;F(I i=0;i<8;++i)y=y*2+x%2,x/=2;R y;}struct BI{BI(Y t=""):s(t),cb{0}{reverse(s.begin(),s.end());}BI(BI&from,I nb):s(from.s.substr(from.s.S()-(from.cb+nb+7)/8)),cb{from.cb}{
s[0]&=-1<<(-from.cb-nb&7);from.s.resize(from.s.S()-(from.cb+nb)/8);from.cb=from.cb+nb&7;}template<class T>A&rdi(T&x,I bytes=1){x=0;while(bytes--)x=x*256+uint8_t(s.back()),s.pop_back();R x;}template<class T>A&rdbi(T&x,I b){x=0;while(b--)x=x*2+rdb();R x;}void rbflush(){if(cb)cb=0,s.pop_back();}bool rdb(){bool x=s.back()&128>>cb++;if(cb==8)cb=0,s.pop_back();R x;}
bool rdbtz(){R s.S()?rdb():0;}Y s;I cb;};struct BO{BO():s(),cb{8}{}void wti(uint32_t x,I bytes=1){while(bytes--)s+=char(x>>bytes*8&255);}void wtbi(uint64_t x,I b){while(b--)wtb(x>>b&1);}void wbflush(){if(cb!=8)cb=8;}void wtb(bool x){if(cb==8)cb=0,s+='\0';s.back()^=x<<7-cb++;}I getbpos(){R s.S()*8-8+cb;}void append(BO&from){I nb=from.getbpos();
F(BI tmp(from.s);nb--;)wtb(tmp.rdb());}Y s;I cb;};struct FT{FT(V<H>f):f(f),cf(f.S()+1){partial_sum(f.begin(),f.end(),cf.begin()+1);sf=cf.back();}void upd(I i){}H getcf(I i){R cf[i];}H getsf(){R sf;}I getsym(H v){R upper_bound(cf.begin(),cf.end(),v)-cf.begin()-1;}private:V<H>f,cf;H sf;};struct Fenw{V<H>v;I n,mxo;Fenw(I n):v(n),n{n},mxo{1}{while(2*mxo<n)mxo*=2;}Fenw(V<H>u):Fenw(u.S())
{F(I i=0;i<n;++i)if(v[i]+=u[i],(i|i+1)<n)v[i|i+1]+=v[i];}void add(I i,H x){F(;i<n;i|=i+1)v[i]+=x;}H que(I i){H x{};F(;i;i&=i-1)x+=v[i-1];R x;}I ubo(H x){H y{};I i{};F(I k=mxo;k;k/=2)if(i+k<n&&y+v[i+k-1]<=x)y+=v[(i|=k)-1];R i+1;}};struct CT{CT(V<H>f,H step):cf{f},step{step}{sf=cf.que(f.S());}void upd(I i){cf.add(i,step),sf+=step;}void upd(I i,I step){cf.add(i,step),sf+=step;}
H getcf(I i){R cf.que(i);}H getsf(){R sf;}I getsym(H x){R cf.ubo(x)-1;}private:Fenw cf;H sf,step;};struct SCT{SCT(V<H>f,H step,I smooth):cf{f},step{step},smooth{smooth}{sf=cf.que(f.S());}void upd(I i){F(I j=max(i-smooth+1,0);j<min(i+smooth,(I)cf.v.S());++j){cf.add(j,step-step*abs(i-j)/smooth),sf+=step-step*abs(i-j)/smooth;}}H getcf(I i){R cf.que(i);}H getsf(){R sf;}I getsym(H x){R cf.ubo(x)-1;}private:Fenw cf;H sf,step;I smooth;};struct ST{ST(H n,I k):n{n},k{k},sf{1ll<<30}{}void upd(H i){n=i,--k;}H getsf(){R sf;}
H getcf(H i){if(!k)R i?sf:0;if(i==k-1)R 0;H t=n-i;double B=1./sf*8;double a=exp(lgamma(1+i)-lgamma(1+i-k)+(lgamma(1+n-k)-lgamma(1+n)));H res=(a+B*i)/(1+B*(n-k+1)*1.1)*(sf-1);R res;}H getsym(H x){if(!k)R 0;H l=k-1,r=n;while(r>l+1)(getcf((l+r)/2)<=x?l:r)=(l+r)/2;R l;}private:H n;I k;H sf;};struct u128{using u64=uint64_t;using u32=uint32_t;u64 hi,lo;
static u128 mul(u64 x,u64 y){u64 a=x>>32,b=(u32)x,c=y>>32,d=(u32)y,ac=a*c,ad=a*d,bc=b*c,bd=b*d,carry=(u32)ad+(bd>>32)+(u32)bc;R{ac+(ad>>32)+(bc>>32)+(carry>>32),(ad<<32)+(bc<<32)+bd};}u64 operator/(u64 x){u64 rat,res;asm("divq %4;\n\t":"=a"(rat),"=d"(res):"d"(hi),"a"(lo),"r"(x));R rat;}u128&dec(){R hi-=!lo--,*this;}};template<class C,class FT>struct AC{static constexpr H N=1ll<<32;FT f;H l,r;AC(FT f):f(f),l{},r{N-1}{}void upd(H i){A d=r-l+1;r=l+u128::mul(f.getcf(i+1),d)/f.getsf()-1;l=l+u128::mul(f.getcf(i),d)/f.getsf();while(!((l^r)&N/2))((C&)*this).shift(),l=2*l&N-1,r=2*r&N-1|1;while(((l&~r)&N/4))((C&)*this).tweak(),l=2*l^N/2,r=2*r^N^N/2|1;f.upd(i);
}};template<class FT>struct AE:AC<AE<FT>,FT>{using Base=AC<AE<FT>,FT>;BO&out;I&rb;I sb,d;AE(FT f,BO&out,I&rb):Base{f},out{out},rb{rb},sb{out.getbpos()},d{}{}void shift(){F(out.wtb(Base::r>=Base::N/2);d;--d)out.wtb(Base::l<Base::N/2);}void tweak(){++d;}void write(H i){Base::upd(i);}void finish(){if(~d)d=-1,out.wtb(1),rb=out.getbpos()-sb;}~AE(){finish();}};template<class FT>struct AD:AC<AD<FT>,FT>{using Base=AC<AD<FT>,FT>;BI in;H code;AD(FT f,BI&inp,I nb):Base{f},in{inp,nb},code{}{
F(I i=32;i--;)code=code*2+in.rdbtz();}void shift(){code=code<<1&Base::N-1|in.rdbtz();}void tweak(){code=code&Base::N/2|code<<1&Base::N/2-1|in.rdbtz();}H read(){H x=Base::f.getsym(u128::mul(code-Base::l+1,Base::f.getsf()).dec()/(Base::r-Base::l+1));R Base::upd(x),x;}};namespace cmk666SAIS{
#define For(i,j,k)F(I i=(j);i<=(k);i++)
#define Fol(i,j,k)F(I i=(j);i>=(k);i--)
template<class IT>inline void induced_sort(I n,I m,IT s,I o,I*val,I*ty,I*cnt,I*sa){I*c=cnt+m+1;fill(sa,sa+n+1,0),copy(cnt,c,c);Fol(i,o,0)sa[--c[s[val[i]]]]=val[i];copy(cnt,cnt+m,c+1);For(i,0,n)if(sa[i]&&!ty[sa[i]-1])sa[c[s[sa[i]-1]]++]=sa[i]-1;copy(cnt,c,c);Fol(i,n,0)if(sa[i]&&ty[sa[i]-1])sa[--c[s[sa[i]-1]]]=sa[i]-1;}template<class IT>inline bool lms_equal(I x,I y,IT s,I*ty){if(s[x]!=s[y])R false;while(s[++x]==s[++y]&&ty[x]==ty[y])
if(ty[x]==2)R true;R false;}template<class IT>inline void sa_is(I n,I m,IT s,I*ty,I*lms,I*cnt,I*sa){I o=-1,c=-1,*t=sa;ty[n]=1;Fol(i,n-1,0)ty[i]=s[i]==s[i+1]?ty[i+1]:s[i]<s[i+1];fill(cnt,cnt+m+1,0);For(i,0,n)cnt[s[i]]++;partial_sum(cnt,cnt+m+1,cnt);For(i,1,n)if(!ty[i-1]&&ty[i])ty[i]=2,lms[++o]=i;induced_sort(n,m,s,o,lms,ty,cnt,sa);For(i,0,n)if(ty[sa[i]]==2)*t++=sa[i];For(i,0,o)c+=c<=0||!lms_equal(sa[i],sa[i-1],s,ty),t[sa[i]>>1]=c;For(i,0,o)t[i]=t[lms[i]>>1];if(c<o)sa_is(o,c,t,ty+n+1,lms+o+1,cnt+m+1,sa);else For(i,0,o)sa[t[i]]=i;For(i,0,o)lms[o+1+i]=lms[sa[i]];induced_sort(n,m,s,o,lms+o+1,ty,cnt,sa);}template<class IT>void suffix_sort(I n,IT s,I*sa){V<char>t(n+1);V<I>ty(n*2+2),lms(n+1),cnt(n*2+2);A o=minmax_element(s+1,s+n+1);I d=*o.first-1,m=*o.second-d;
For(i,1,n)t[i-1]=s[i]-d;t[n]=0;sa_is(n,m,&t[0],&ty[0],&lms[0],&cnt[0],sa);For(i,1,n)sa[i]++;}}struct SA{V<I>sa,lcp;SA(Y s):sa(s.S()+1),lcp(s.S()+1){I n=s.S();s='\0'+s;cmk666SAIS::suffix_sort(n,s.begin(),&sa[0]);s.erase(s.begin());V<I>x(n+1);F(I i=n;~i;--i)x[sa[i]-=!!i]=i;F(I i=0,k=0,j;i<n;lcp[x[i++]]=k)F(k&&k--,j=sa[x[i]-1];max(i,j)+k<n&&s[i+k]==s[j+k];k++);sa.erase(sa.begin());x.pop_back();lcp.erase(lcp.begin());lcp.erase(lcp.begin());F(A&x:x)--x;}};struct DSU{V<I>p;
V<array<I,2>>h;DSU(I n):p(n,-1){}I getp(I v){R p[v]<0?v*2:getp(p[v]/2)^p[v]&1;}I getppc(I v){R p[v]<0?v*2:p[v]=getppc(p[v]/2)^p[v]&1;}bool uni(I u,I v,I x){if((u=getp(u))/2==(v=getp(v))/2)R 0;x^=u+v&1,u/=2,v/=2;if(p[u]<p[v])swap(u,v);h.X({u,p[u]});p[v]+=p[u],p[u]=v*2+x;R 1;}void rollback(I t){while(h.S()>t){A[u,pu]=h.back();h.pop_back();p[p[u]/2]-=pu,p[u]=pu;}}};H multiway_delta_prior(I i,I mx){A cdf=[&](double x){A t=1-x/mx;R sqrt(1-(t*t)*(t*t));};A _012=.76,_3=2.49,_45=2.63,_6=3.55;A t=__builtin_ctz(i|64);static double ccdf=cdf(0);double x=ccdf;ccdf=cdf(i+1);R(i<17?0:(ccdf-x)*1e7*(t<3?_012:t<4?_3:t<6?_45:_6))+1;
}V<I>numways{2,3,4,5};void multiwayencode(Y s,BO&out,BO&outb,V<array<I,2>>kc){Y b,b2;F(A c:s)F(I k=8;k--;)b+=char(c>>k&1);SA sa(b);DSU dsu(b.S());{I z=-1,o=-1;F(A&[l,r]:kc)F(I i=l*8;i<r*8;++i){A&t=b[i]?z:o;if(~t)dsu.uni(i,t,0);else t=i;}}
F(A k:{9,12,13})if(b.S()>k<<18)numways.pop_back();const I lmax=1<<10,pi=9,pd=lg(b.S()-1)-4,pl=10,pt=0;priority_queue<tuple<I,I,I,I,V<I>>>repeats;V<pair<I,V<I>>>ops;I ent=b.S();A eae=[&](I w,I l,I c){R-l*(w-1)-2*(w==2)+pl+pi+pd*(w-1)+pt+c;};A prio=[&](I w,I l,I c){R-eae(w,l,c)*48/(w-1)-eae(w,l,c);};F(I i=0;i<numways.S();++i){I w=numways[i];F(I i=w-2;i<sa.lcp.S();++i){bool mx=0;I l=1e9;F(I j=0;j<w-1;++j)l=min(l,sa.lcp[i-j]);F(I j=-1;j<w-1;++j){mx|=!sa.sa[i-j];if(!mx&&~j)
mx|=b[sa.sa[i+1]-1]!=b[sa.sa[i-j]-1];}if(mx&&eae(w,l,0)<0){V<I>v;F(I j=-1;j<w-1;++j)v.X(sa.sa[i-j]);sort(v.begin(),v.end());repeats.push({prio(w,l,0),l,0,0,move(v)});}}}while(repeats.S()){A[p,l,dl,dr,v]=repeats.top();repeats.pop();A&fu=v;I w=v.S();A every2=[&](I t){F(I i=1;i<w;++i)if(dsu.getppc(fu[i]+t)/2!=dsu.getppc(fu[i-1]+t)/2)R 0;R 1;};while(l&&every2(l-1))--l,++dr;while(l&&every2(0)){F(A&x:v)++x;--l,++dl;}dsu.h={};I t=l;I cc=0;while(t--)
F(I i=1;i<w;++i)cc+=!dsu.uni(v[i]+t,v[0]+t,0);if(w==2&&v[0]>dl&&v[1]+l+dr<b.S())cc+=!dsu.uni(v[1]-dl-1,v[0]-dl-1,1)+!dsu.uni(v[1]+l+dr,v[0]+l+dr,1);I dent=eae(w,l,cc);if(dent>=0){dsu.rollback(0);continue;}if(p!=prio(w,l,cc)){repeats.push({prio(w,l,cc),l,dl,dr,move(v)});dsu.rollback(0);continue;}ent+=dent;F(A&x:v)x-=dl;ops.X({l+dl+dr,move(v)});}priority_queue(move(repeats));SA(move(sa));out.wti(b.S(),4);out.wti(ops.S(),4);F(A&[l,v]:ops)sort(v.rbegin(),v.rend());sort(ops.begin(),ops.end(),[](A&a,A&b){R a.second[0]>b.second[0];});I acb;if(AE ac{CT({1,1,1,1},1),outb,acb};1)F(A&[l,v]:ops)ac.write(find(numways.begin(),numways.end(),v.S())-numways.begin());out.wti(acb,4);
F(I i=-1;A&[l,v]:ops)if(++i,l>=lmax){outb.wtb(1);outb.wtbi(i,lg(ops.S()-1|1));outb.wtbi(0,lg(l/lmax)-1);outb.wtbi(l,lg(l));}outb.wtb(0);I ssz=0;if(AE ac{SCT(V<H>(lmax,1e2),1e3,10),outb,acb};1)F(A&[l,v]:ops){if(l<lmax)ac.write(l-1);ssz+=v.S();}out.wti(acb,4);if(AE ac{ST{0,0},outb,acb};1)F(I i=0,p=b.S()-1;A[l,v]:ops){ac.f=ST(p+1,(ssz+ops.S()-i++)/2);ac.write(v[0]);ssz-=v.S();p=v[0];}out.wti(acb,4);V<H>prior(b.S()),cnt(b.S());F(I i=0;i<b.S();++i)prior[i]=multiway_delta_prior(i,b.S());if(AE ac{CT(prior,0),outb,acb};1)F(A[l,v]:ops)F(I i=0;++i<v.S();){
I d=v[i-1]-v[i];ac.write(d);++cnt[d];ac.f.upd(d,prior[d]*(cnt[d]<4?8:1));}out.wti(acb,4);V<I>minx(b.S(),b.S());F(I i=b.S();i--;)minx[dsu.getppc(i)/2]=i;sort(minx.begin(),minx.end());F(A x:minx)if(x<b.S())outb.wtb(b[x]);}Y multiwaydecode(Y s,BI&in,BI&inb,V<array<I,2>>kc){I nb,nops;in.rdi(nb,4),in.rdi(nops,4);F(A k:{9,12,13})if(nb>k<<18)numways.pop_back();V<pair<I,V<I>>>ops(nops);const I lmax=1<<10,pi=lg(nb-1),pd=lg(nb-1),pl=lg(lmax-1),pt=2;I ssz=0,acb;in.rdi(acb,4);if(AD ac{CT({1,1,1,1},1),inb,acb};1)F(A&[l,v]:ops)v.resize(numways[ac.read()]);while(inb.rdb()){I i,k=0;inb.rdbi(i,lg(ops.S()-1|1));while(!inb.rdb())++k;
inb.rdbi(ops[i].first,k+10)|=1<<k+10;}in.rdi(acb,4);if(AD ac{SCT(V<H>(lmax,1e2),1e3,10),inb,acb};1)F(A&[l,v]:ops){if(!l)l=ac.read()+1;ssz+=v.S();}V<H>freqs(nb);F(I i=0;A&v:freqs){A cdf=[&](double x){R pow(1-(1-x/nb)*(1-x/nb),.5);};v+=(cdf(i+1)-cdf(i))*1e7+1;++i;}in.rdi(acb,4);if(AD ac{ST{0,0},inb,acb};1)F(I i=0,p=nb-1;A&[l,v]:ops){ac.f=ST(p+1,(ssz+ops.S()-i++)/2);v[0]=ac.read();ac.f=ST(v[0],v.S()-1);ssz-=v.S();p=v[0];}V<H>prior(nb),cnt(nb);F(I i=0;i<nb;++i)prior[i]=multiway_delta_prior(i,nb);in.rdi(acb,4);if(AD ac{CT(prior,0),inb,acb};1)
F(A&[l,v]:ops)F(I i=0;++i<v.S();){I d=ac.read();v[i]=v[i-1]-d;++cnt[d];ac.f.upd(d,prior[d]*(cnt[d]<4?8:1));}DSU dsu(nb);{I z=-1,o=-1;Y b;F(A c:s)F(I k=8;k--;)b+=char(c>>k&1);F(A&[l,r]:kc)F(I i=l*8;i<r*8;++i){A&t=b[i]?z:o;if(~t)dsu.uni(i,t,0);else t=i;}}
F(A[l,v]:ops){if(v.S()==2&&v[1]&&v[0]+l<nb)dsu.uni(v[0]-1,v[1]-1,1),dsu.uni(v[0]+l,v[1]+l,1);while(l--)F(I i=v.S();i--;)dsu.uni(v[0]+l,v[i]+l,0);}V<I>minx(nb,nb);F(I i=nb;i--;)minx[dsu.getppc(i)/2]=i;sort(minx.begin(),minx.end());Y b(nb,'\0');F(A x:minx)if(x<nb)b[dsu.getppc(x)/2]=inb.rdb()^dsu.getppc(x)&1;F(I i=nb;i--;)b[i]=b[dsu.getppc(i)/2]^dsu.getppc(i)&1;F(I i=0;A&c:s)F(I k=8;k--;)c|=b[i++]<<k;R s;}
Y allc=td::gzdecode(b64d("")).as_slice().str(),
allh=b64d("");
V<Y>allcsp;map<Y,I>c2i,h2i;struct DAG{BI in,inb;BO out,outb;V<V<char>>d;V<I>refd,bd,lvl,s,nref;V<V<I>>to;V<I>contsz,cb;V<array<I,2>>conte;I f,pi,ps,nc,nr,z,sc,ir;I nbytes(uint32_t x){I n=1;while(1ull<<n*8<=x)++n;R n;}void rdh(bool sh){in.rdi(f,sh?0:4),in.rdi(f),pi=f&7,in.rdi(ps),in.rdi(nc,pi),sh?:in.rdi(nr,pi),sh?:in.rdi(z,pi),in.rdi(sc,ps),sh?:in.rdi(ir,pi);d.resize(nc),refd.resize(nc),bd.resize(nc),lvl.resize(nc),s.resize(nc),nref.resize(nc),to.resize(nc);}void wth(bool sh){pi=nbytes(nc),f=f&~7|pi,ps=nbytes(sc),nr=1,z=0,ir=0;sh?void():out.wti(0xb5ee9c72,4),out.wti(f),out.wti(ps),out.wti(nc,pi),sh?void():out.wti(nr,pi),sh?void():out.wti(z,pi),out.wti(sc,ps),sh?void():out.wti(ir,pi);}void splitrefd(I i)
{A r=refd[i],b=bd[i];lvl[i]=r>>5,s[i]=r&8?b&2?b/35+1:1:0,nref[i]=r&7,d[i].resize(bd[i]+1>>1);}
#define _i_ F(I p=0,pp=0,i=0;i<nc;++i)
#define _o_ F(I p=0,pp=0;A i:ord)
void rdaos(){rdh(0);_i_{in.rdi(refd[i]),in.rdi(bd[i]),splitrefd(i);to[i].resize(nref[i]);F(I j=0;j*2<bd[i];++j)in.rdi(d[i][j]);F(I j=0;j<nref[i];++j)in.rdi(to[i][j],pi);}}void wtaos(){wth(0);_i_{out.wti(refd[i]),out.wti(bd[i]);F(I j=0;j*2<bd[i];++j)out.wti(d[i][j]);F(I j=0;j<nref[i];++j)out.wti(to[i][j],pi);}}void rebl(V<I>bl)
{V<I>ibl(nc);V<char>vis(nc);_i_ ibl[bl[i]]=i;_i_ F(I j=i,k;!vis[j];j=k)if(vis[j]=1,!vis[k=ibl[j]]){swap(d[j],d[k]);swap(refd[j],refd[k]);swap(bd[j],bd[k]);swap(lvl[j],lvl[k]);swap(s[j],s[k]);swap(nref[j],nref[k]);swap(to[j],to[k]);}_i_ F(A&x:to[i])x=bl[x];}V<I>blc(){V<I>bl(nc);I tout=0;A dfs=[&](A dfs,I v)->void{bl[v]=1;F(A u:to[v])if(!bl[u])dfs(dfs,u);bl[v]=++tout;};dfs(dfs,0);I c=tout;F(A&x:bl)x=x?tout-x:c++;rebl(bl);R bl;}void contract(){blc();
V<V<I>>from(nc);V<I>bl(nc);_i_ F(A&j:to[i])from[j].X(i);V<I>inde(nc);I nv=nc;F(I sz=conte.S()+1;sz!=conte.S()&&(sz=conte.S(),1);)_i_ F(A&j:to[i])if(from[j].S()==2){V<I>Z,B,C;I a=i,b=from[j][0]^from[j][1]^a;if(from[a].S()!=1||from[b].S()!=1||a==b)continue;I a0=a,pa=from[a0][0],ia=find(to[pa].begin(),to[pa].end(),a0)-to[pa].begin();I b0=b,pb=from[b0][0],ib=find(to[pb].begin(),to[pb].end(),b0)-to[pb].begin();while(1){if(to[a].S()!=2||to[b].S()!=2||from[a].S()>1||from[b].S()>1)break;I c=-1;if(to[a][0]==to[b][0])c=to[a][0];if(to[a][1]==to[b][1])c=to[a][1];if(!~c||from[c].S()!=2||to[c].S())break;Z.X(a),B.X(b),C.X(c),a=to[a][0]^to[a][1]^c,b=to[b][0]^to[b][1]^c;}if(Z.S()<3)continue;V<I>D{Z};D.insert(D.end(),B.begin(),B.end());D.insert(D.end(),C.begin(),C.end());D.insert(D.end(),{pa,pb,a,b});sort(D.begin(),D.end());
if(unique(D.begin(),D.end())!=D.end())continue;contsz.X(Z.S());to[pa][ia]=a;to[pb][ib]=b;nv-=Z.S()*3;fill(bl.begin(),bl.end(),0);I tpa=pa,tpb=pb;F(I i=0;i<Z.S();++i){tpa=Z[i];tpb=B[i];cb.X(to[Z[i]][1]==C[i]);to[Z[i]]={};bl[Z[i]]=nv++;to[B[i]]={};bl[B[i]]=nv++;to[C[i]]={};bl[C[i]]=nv++;}nv-=Z.S()*3;F(I i=0,j=0;i<nc;++i,j+=j==nv?Z.S()*3:0)if(!bl[i])bl[i]=j++;pa=bl[pa],pb=bl[pb];rebl(bl);A lbl=blc();_i_ inde[i]=p,p+=to[i].S();conte.X({inde[lbl[pa]]+ia,inde[lbl[pb]]+ib});_i_ from[i].clear();_i_ F(A&j:to[i])from[j].X(i);}done:;
}void uncontract(){blc();V<V<I>>from(nc);_i_ F(A&j:to[i])from[j].X(i);V<I>inde(nc);I nv=nc-cb.S()*3,nb=cb.S();F(I i=conte.S();i--;){blc();A[a,b]=conte[i];_i_ inde[i]=p,p+=to[i].S();_i_ from[i].clear();_i_ F(A&j:to[i])from[j].X(i);I pa=upper_bound(inde.begin(),inde.end(),a)-inde.begin()-1;I pb=upper_bound(inde.begin(),inde.end(),b)-inde.begin()-1;I ia=a-inde[pa],ib=b-inde[pb];a=to[pa][ia],b=to[pb][ib];nb-=contsz[i];F(I j=0;j<contsz[i];++j){I bit=cb[nb++];to[pa][ia]=nv,to[nv++].X(a);to[pb][ib]=nv,to[nv++].X(b);to[nv-2].insert(to[nv-2].begin()+bit,nv);to[nv-1].insert(to[nv-1].begin()+bit,nv);ia=ib=!bit;pa=nv-2,pb=nv++-1;}nb-=contsz[i];}
blc();}void wtdoag(){V<I>sd,hm,href;V<I>remref(nc);_i_ F(A x:to[i])++remref[x];V<I>roots{0};V<I>bl(nc);_i_ bl[i]=i;F(I i=0;roots.S();++i){A r=roots.back();roots.pop_back();bl[r]=i;sd.X(0);hm.X(0);F(I j=-1;A x:to[r])if(++j,--remref[x])href.X(x),hm[i]|=1<<j;else roots.X(x),++sd[i];}F(A&x:href)x=bl[x];rebl(bl);I s1,s2,s3;if(AE ac{FT{{1281,1020,836,124,4}},outb,s1};1)F(A x:sd)ac.write(x);if(AE ac{FT{{2537,393,157,139,28,7,2,1,1,1,1,1,1,1,1,1}},outb,s2};1)F(A x:hm)
ac.write(x);out.wti(s1,4);out.wti(s2,4);V<H>freq(sd.S());F(A&v:freq)v=1e6;if(AE ac{CT(freq,3e6),outb,s3};1)F(A x:href)ac.write(x);out.wti(s3,4);out.wti(href.S(),4);}void rddoag(){I s1,s2,s3,hrs;in.rdi(s1,4),in.rdi(s2,4),in.rdi(s3,4),in.rdi(hrs,4);V<I>sd(nc-cb.S()*3),hm(sd.S()),href(hrs);uint64_t hsh=0;if(AD ac{FT{{1281,1020,836,124,4}},inb,s1};1)F(A&x:sd)x=ac.read();if(AD ac{FT{{2537,393,157,139,28,7,2,1,1,1,1,1,1,1,1,1}},inb,s2};1)F(A&x:hm)x=ac.read();V<H>freq(sd.S());F(A&v:freq)v=1e6;if(AD ac{CT(freq,3e6),inb,s3};1)F(A&x:href)x=ac.read();V<I>roots{};F(I i=sd.S();i--;)
{to[i].resize(sd[i]+__builtin_popcount(hm[i]));F(I j=to[i].S();j--;)if(hm[i]&1<<j)to[i][j]=href.back(),href.pop_back();else to[i][j]=roots.back(),roots.pop_back();roots.X(i);}}void wtsoa(){wth(1);out.wti(conte.S(),pi);F(A&[a,b]:conte)out.wti(a,pi),out.wti(b,pi);F(A&s:contsz)out.wti(s,pi);F(A x:cb)outb.wtb(x);wtdoag();V<I>kc(nc);if(c2i.S()){V<H>cms0,cms1;_i_ if(A it=c2i.find(Y{(char)refd[i],(char)bd[i]}+Y(d[i].begin(),d[i].end()));it!=c2i.end())cms0.X(i),cms1.X(it->second),c2i.erase(it),kc[i]=1;out.wti(cms0.S(),4);F(A x:cms0)outb.wtbi(x,lg(nc-1|1));F(A x:cms1)outb.wtbi(x,lg(allcsp.S()-1|1));}_i_ if(!kc[i]){out.wti(refd[i]),out.wti(bd[i]);
if(!s[i]&&bd[i])out.wti(d[i][0]);}V<I>ord(nc);F(I i=0;i<nc;++i)ord[i]=i;stable_sort(ord.begin(),ord.end()-cb.S()*3,[&](I i,I j){R tuple{refd[i],bd[i],!s[i]&&bd[i]>1?d[i][0]:0}<tuple{refd[j],bd[j],!s[j]&&bd[j]>1?d[j][0]:0};});F(I lo:{0,1})_i_ if(s[i])F(I j=s[i]>1?s[i]-2<<1:lvl[i]*2;j--;)if(j%2==lo)out.wti(d[i].rbegin()[j]);_i_ if(s[i]==1)out.wti(d[i][1]);_o_ if(!s[i]&&bd[i]%2&&bd[i]>1&&!kc[i])out.wti(brev8(d[i].back()^p)),p=d[i].back();_o_ if(!s[i]&&bd[i]>3&&!kc[i])out.wti(d[i][1]^p),p=d[i][1];if(BO tmp;1){V<array<I, 2>>k;_o_ if(!s[i]){I t=tmp.s.S();F(I j=min(2,bd[i]/2);j<bd[i]/2;++j)tmp.wti(d[i][j]);if (kc[i])k.X({t,(I)tmp.s.S()});}multiwayencode(tmp.s,out,outb, k);}I pos=0;
#define forh _i_ if(s[i])F(I t=s[i]>1?s[i]-2<<1:lvl[i]*2,j=1+(s[i]==1);j<bd[i]/2-t;j+=32,++pos)
forh;I phi=lg(h2i.S()-1),php=lg(pos-1|1);V<I>kn(pos);pos=0;forh if(A it=h2i.find({&d[i][j],&d[i][j]+32});it!=h2i.end()){outb.wtb(1);outb.wtbi(it->second,phi);outb.wtbi(pos,php);kn[pos]=1;}pos=0;
outb.wtb(0);outb.wbflush();forh if(!kn[pos])F(I k=0;k<32;++k)outb.wti(d[i][j+k]);outb.wti(outb.s.S()+4,4);}void rdsoa(){rdh(1);I sze;in.rdi(sze,pi);conte.resize(sze);contsz.resize(sze);F(A&[a,b]:conte)in.rdi(a,pi),in.rdi(b,pi);F(A&x:contsz)in.rdi(x,pi);cb.resize(accumulate(contsz.begin(),contsz.end(),0));F(A&x:cb)x=inb.rdb();rddoag();V<I>kc(nc);if(c2i.S()){I kcc;in.rdi(kcc,4);V<I>cms0(kcc),cms1(kcc);F(A&x:cms0)inb.rdbi(x,32-__builtin_clz(nc-1|1));F(A&x:cms1)inb.rdbi(x,32-__builtin_clz(allcsp.S()-1|1));F(I i=0;i<kcc;++i){I j=cms0[i];kc[j]=1;
Y t=allcsp[cms1[i]];refd[j]=t[0];bd[j]=(uint8_t)t[1];d[j].resize((uint8_t)t[1]+1>>1);splitrefd(j);copy(t.begin()+2,t.end(),d[j].begin());}}_i_ if(!kc[i]){in.rdi(refd[i]),in.rdi(bd[i]),splitrefd(i);if(!s[i]&&bd[i])in.rdi(d[i][0]);}V<I>ord(nc);F(I i=0;i<nc;++i)ord[i]=i;stable_sort(ord.begin(),ord.end()-cb.S()*3,[&](I i,I j){R tuple{refd[i],bd[i],!s[i]&&bd[i]>1?d[i][0]:0}<tuple{refd[j],bd[j],!s[j]&&bd[j]>1?d[j][0]:0};});_i_ if(s[i])d[i][0]=s[i];F(I lo:{0,1})_i_ if(s[i])F(I j=s[i]>1?s[i]-2<<1:lvl[i]*2;j--;)if(j%2==lo)in.rdi(d[i].rbegin()[j]);_i_ if(s[i]==1)in.rdi(d[i][1]);_o_ if(!s[i]&&bd[i]%2&&bd[i]>1&&!kc[i])in.rdi(d[i].back()),d[i].back()=p^=brev8(d[i].back());_o_ if(!s[i]&&bd[i]>3&&!kc[i])p=in.rdi(d[i][1])^=p;{V<array<I,2>>k;Y t;_o_ if(!s[i]){I f=t.S();F(I j=min(2,bd[i]/2);j<bd[i]/2;++j)t+=d[i][j];if (kc[i])k.X({f,(I)t.S()});}if(BI tmp(multiwaydecode(t,in,inb,k));1){_o_ if(!s[i])F(I j=min(2,bd[i]/2);j<bd[i]/2;++j)tmp.rdi(d[i][j]);}}
I pos=0;forh;I phi=lg(h2i.S()-1),php=lg(pos-1|1);V<I>kn(pos,-1);pos=0;while(inb.rdb()){I i,p;inb.rdbi(i,phi);inb.rdbi(p,php);kn[p]=i;}inb.rbflush();forh if(~kn[pos])copy_n(&allh[kn[pos]*32],32,&d[i][j]);else F(I k=0;k<32;++k)inb.rdi(d[i][j+k]);}};Y compress(Y s){td::Ref<vm::Cell>root=vm::std_boc_deserialize(s).move_as_ok();s=vm::std_boc_serialize(root,0).move_as_ok().as_slice().str();DAG dag;dag.in={s};dag.rdaos();dag.contract();dag.wtsoa();R td::gzencode(dag.out.s,1).as_slice().str()+dag.outb.s;}Y decompress(Y s){I bin;BI(s.substr(s.S()-4)).rdi(bin,4);DAG dag;dag.in={td::gzdecode(s.substr(0,s.S()-bin)).as_slice().str()};dag.inb={s.substr(s.S()-bin)};dag.rdsoa();dag.uncontract();dag.wtaos();A root=vm::std_boc_deserialize(dag.out.s).move_as_ok();R vm::std_boc_serialize(root,31).move_as_ok().as_slice().str();}
I main(I argc, char* argv[]) {F(I i=0,j=0;i<allc.S();){I l=((uint8_t)allc[i+1]+5)/2;allcsp.X(allc.substr(i,l));c2i[allc.substr(i,l)]=j++;i+=l;}
F(I i=0;i<allh.S()/32;++i)h2i[allh.substr(i*32,32)]=i;Y mode=argv[1],b64;cin>>b64;Y d(b64d(b64));d=mode=="compress"?compress(d):decompress(d);cout<<td::base64_encode(d)<<endl;}