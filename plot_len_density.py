from matplotlib import pyplot as plt
from collections import Counter as C
import seaborn as sns
from math import *
from scipy.ndimage.filters import gaussian_filter1d

# s = open("comp2").read().split('\n')
# s = [s for s in s if "compress" in s]
lst = [[*map(int, s.split())][1:] for s in [*open("lengths")]]
lst = [x for a in lst for x in a]
# lst = [int(x) for s in s for x in s.split('  ')[1].split()]
# lst = [tuple([int(x) for x in s.split(' ')[0:3:2]]) for s in s]
# lst = [b for a, b in lst if a > 0]
lst1 = [*map(int, open("lengths").readline().split())][1:]
# s
# lst = [*map(int, s.split())]
n = len(lst)
slst = sorted(lst)
mx = max(slst)
mx = 1024
slst = [x for x in slst if x < 1024]
# print(mx)

fig, ax = plt.subplots()
ax.set_ylabel('Число вхождений')
ax.set_xlabel('Длина')
for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] +
             ax.get_xticklabels() + ax.get_yticklabels()):
  item.set_fontsize(20)
c = C(slst)
ax.scatter(sorted(set(slst)), [c[x] for x in sorted(set(slst))])
plt.show()